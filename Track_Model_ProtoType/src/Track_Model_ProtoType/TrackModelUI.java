/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Track_Model_ProtoType;

import java.awt.*;
import java.util.*;
import java.io.*;
import javax.swing.JFileChooser;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;

/**
 *
 * @author dah106
 */
public class TrackModelUI extends javax.swing.JFrame {
    
    
    protected String PathOfFile = "Track_Layout.csv";
    public HashMap<Integer, Block> RedLine;
    public HashMap<Integer, Block> GreenLine;
   
    public LinkedBlock LinkedRed;
    public LinkedBlock LinkedGreen;
    
    public String trainLineChooserRadioGroup = "";
    public String trainLineChooserRadioGroup1 ="";
    public boolean hasSwitch; //return true if a block has a switch machine, return false if a block has no switch machine
    
    //public int isTrackStatus;//return 100 if a block is available for normal operation, return -100 if a block is closed for maintenance
    
    public int lineChooserRedCounter;//increment each time when a line red is choosen
    public int lineChooserGreenCounter;//increment each time when a line red is choosen
    public TrackModelUI() 
    {
        this.RedLine = new HashMap();
        this.GreenLine = new HashMap();
        initComponents();
        groupButton();
        groupButton1();
        groupButton2();
        
        LoadAutomatically();
        hasSwitch = false;
        lineChooserRedCounter = 0;
        lineChooserGreenCounter = 0;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        checkRailwayCrossingBar = new javax.swing.JButton();
        getCumulativeElevation = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        turnTrackHeaterON = new javax.swing.JToggleButton();
        turnTrackHeaterOFF = new javax.swing.JToggleButton();
        getGrade = new javax.swing.JToggleButton();
        getElevation = new javax.swing.JToggleButton();
        getStationName = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayBlockHeader = new javax.swing.JTextArea();
        checkSwitchMachine = new javax.swing.JToggleButton();
        getSpeedLimit = new javax.swing.JToggleButton();
        jLabel14 = new javax.swing.JLabel();
        modeTitle1 = new javax.swing.JLabel();
        modeTitle2 = new javax.swing.JLabel();
        LoadFileButton = new javax.swing.JButton();
        checkTransponder = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        redLineRadioButton = new javax.swing.JRadioButton();
        greenLineRadioButton = new javax.swing.JRadioButton();
        blockNumberComboChooser = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayBlockInformation = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        displayTrackLayout = new javax.swing.JTextArea();
        toggleRailWayCrossingBars = new javax.swing.JButton();
        toggleSwitchMachine = new javax.swing.JButton();
        getBlockLength = new javax.swing.JToggleButton();
        checkTrackStatus = new javax.swing.JToggleButton();
        checkRailwaySignal = new javax.swing.JToggleButton();
        checkTrackCircuitFailure = new javax.swing.JCheckBox();
        checkBrokenRail = new javax.swing.JCheckBox();
        checkPowerFailure = new javax.swing.JCheckBox();
        jScrollPane5 = new javax.swing.JScrollPane();
        displayBlockHeader1 = new javax.swing.JTextArea();
        jLabel15 = new javax.swing.JLabel();
        redLineRadioButton1 = new javax.swing.JRadioButton();
        greenLineRadioButton1 = new javax.swing.JRadioButton();
        blockNumberComboChooser1 = new javax.swing.JComboBox();
        clearScreen = new javax.swing.JToggleButton();
        RadioButtonRailwayLightSTOP = new javax.swing.JRadioButton();
        RadioButtonRailwayLightDECELERATE = new javax.swing.JRadioButton();
        RadioButtonRailwayLightPROCEED = new javax.swing.JRadioButton();
        RadioButtonRailwayLightACCELERATE = new javax.swing.JRadioButton();
        controlRailWayLightSignal = new javax.swing.JButton();
        AddRemoveBlock = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setBounds(new java.awt.Rectangle(0, 10, 0, 0));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        checkRailwayCrossingBar.setText("Check Railway Crossing Bar↑");
        checkRailwayCrossingBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkRailwayCrossingBarMouseClicked(evt);
            }
        });
        checkRailwayCrossingBar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkRailwayCrossingBarActionPerformed(evt);
            }
        });
        getContentPane().add(checkRailwayCrossingBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 460, -1, -1));

        getCumulativeElevation.setText("Cumulative Elevation→");
        getCumulativeElevation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getCumulativeElevationMouseClicked(evt);
            }
        });
        getCumulativeElevation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getCumulativeElevationActionPerformed(evt);
            }
        });
        getContentPane().add(getCumulativeElevation, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 230, 170, 30));

        jLabel16.setFont(new java.awt.Font("Verdana", 1, 36)); // NOI18N
        jLabel16.setText("User Interface for Track Model");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, 630, 40));

        jLabel18.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel18.setText("Track Heater");
        getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 310, 80, 30));

        turnTrackHeaterON.setText("On");
        turnTrackHeaterON.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                turnTrackHeaterONMouseClicked(evt);
            }
        });
        turnTrackHeaterON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnTrackHeaterONActionPerformed(evt);
            }
        });
        getContentPane().add(turnTrackHeaterON, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 330, -1, -1));

        turnTrackHeaterOFF.setText("Off");
        turnTrackHeaterOFF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                turnTrackHeaterOFFMouseClicked(evt);
            }
        });
        turnTrackHeaterOFF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnTrackHeaterOFFActionPerformed(evt);
            }
        });
        getContentPane().add(turnTrackHeaterOFF, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 330, -1, -1));

        getGrade.setText("Grade→");
        getGrade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getGradeMouseClicked(evt);
            }
        });
        getGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getGradeActionPerformed(evt);
            }
        });
        getContentPane().add(getGrade, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, 30));

        getElevation.setText("Elevation→");
        getElevation.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getElevationMouseClicked(evt);
            }
        });
        getElevation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getElevationActionPerformed(evt);
            }
        });
        getContentPane().add(getElevation, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, -1, 30));

        getStationName.setText("Station Name→");
        getStationName.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getStationNameMouseClicked(evt);
            }
        });
        getStationName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getStationNameActionPerformed(evt);
            }
        });
        getContentPane().add(getStationName, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, -1, 30));

        displayBlockHeader.setColumns(20);
        displayBlockHeader.setRows(5);
        jScrollPane1.setViewportView(displayBlockHeader);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 50, 540, 100));

        checkSwitchMachine.setText("Check Switch Machine↑");
        checkSwitchMachine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkSwitchMachineMouseClicked(evt);
            }
        });
        checkSwitchMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkSwitchMachineActionPerformed(evt);
            }
        });
        getContentPane().add(checkSwitchMachine, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 430, -1, -1));

        getSpeedLimit.setText("Speed Limit→");
        getSpeedLimit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getSpeedLimitMouseClicked(evt);
            }
        });
        getSpeedLimit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSpeedLimitActionPerformed(evt);
            }
        });
        getContentPane().add(getSpeedLimit, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 200, -1, -1));

        jLabel14.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel14.setText("Block Number   ↓");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 130, 20));

        modeTitle1.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        modeTitle1.setText("Normal Mode:");
        getContentPane().add(modeTitle1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 200, 50));

        modeTitle2.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        modeTitle2.setText("Failure Mode:");
        getContentPane().add(modeTitle2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 560, -1, -1));

        LoadFileButton.setForeground(new java.awt.Color(0, 102, 153));
        LoadFileButton.setText("Load External File");
        LoadFileButton.setAlignmentY(0.0F);
        LoadFileButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LoadFileButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LoadFileButtonMouseClicked(evt);
            }
        });
        LoadFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadFileButtonActionPerformed(evt);
            }
        });
        getContentPane().add(LoadFileButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 50, 180, 40));

        checkTransponder.setText("Check Transponder↗");
        checkTransponder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTransponderActionPerformed(evt);
            }
        });
        getContentPane().add(checkTransponder, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, -1, -1));

        jLabel1.setText("Track Layout ↓");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 430, -1, -1));

        redLineRadioButton.setText("Red");
        redLineRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                redLineRadioButtonMouseClicked(evt);
            }
        });
        redLineRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redLineRadioButtonActionPerformed(evt);
            }
        });
        getContentPane().add(redLineRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        greenLineRadioButton.setText("Green");
        greenLineRadioButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                greenLineRadioButtonMouseClicked(evt);
            }
        });
        greenLineRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenLineRadioButtonActionPerformed(evt);
            }
        });
        getContentPane().add(greenLineRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, -1, -1));

        blockNumberComboChooser.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose a certain block" }));
        blockNumberComboChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockNumberComboChooserActionPerformed(evt);
            }
        });
        getContentPane().add(blockNumberComboChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 78, 200, 30));

        displayBlockInformation.setColumns(20);
        displayBlockInformation.setRows(5);
        jScrollPane2.setViewportView(displayBlockInformation);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, 540, 250));

        displayTrackLayout.setColumns(20);
        displayTrackLayout.setRows(5);
        jScrollPane3.setViewportView(displayTrackLayout);

        getContentPane().add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 450, 590, 340));

        toggleRailWayCrossingBars.setText("← Toggle Railway Crossing Bars");
        toggleRailWayCrossingBars.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toggleRailWayCrossingBarsMouseClicked(evt);
            }
        });
        toggleRailWayCrossingBars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleRailWayCrossingBarsActionPerformed(evt);
            }
        });
        getContentPane().add(toggleRailWayCrossingBars, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 260, 230, 30));

        toggleSwitchMachine.setText("← Toggle Switch Machine");
        toggleSwitchMachine.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toggleSwitchMachineMouseClicked(evt);
            }
        });
        toggleSwitchMachine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toggleSwitchMachineActionPerformed(evt);
            }
        });
        getContentPane().add(toggleSwitchMachine, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 230, 210, 30));

        getBlockLength.setText("Block Size→");
        getBlockLength.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getBlockLengthMouseClicked(evt);
            }
        });
        getContentPane().add(getBlockLength, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, 30));

        checkTrackStatus.setText("Check Track Status↗");
        checkTrackStatus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkTrackStatusMouseClicked(evt);
            }
        });
        checkTrackStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTrackStatusActionPerformed(evt);
            }
        });
        getContentPane().add(checkTrackStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 350, -1, -1));

        checkRailwaySignal.setText("Check Railway Signal↑");
        checkRailwaySignal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkRailwaySignalMouseClicked(evt);
            }
        });
        getContentPane().add(checkRailwaySignal, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 400, -1, -1));

        checkTrackCircuitFailure.setText("Track Circuit Failure");
        getContentPane().add(checkTrackCircuitFailure, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 750, -1, -1));

        checkBrokenRail.setText("Broken Rail");
        checkBrokenRail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBrokenRailActionPerformed(evt);
            }
        });
        getContentPane().add(checkBrokenRail, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 710, -1, -1));

        checkPowerFailure.setText("Power Failure");
        getContentPane().add(checkPowerFailure, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 730, -1, -1));

        displayBlockHeader1.setColumns(20);
        displayBlockHeader1.setRows(5);
        jScrollPane5.setViewportView(displayBlockHeader1);

        getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 690, 290, 100));

        jLabel15.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel15.setText("Block Number   ↓");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 590, 130, 20));

        redLineRadioButton1.setText("Red");
        redLineRadioButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                redLineRadioButton1MouseClicked(evt);
            }
        });
        redLineRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redLineRadioButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(redLineRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 590, -1, -1));

        greenLineRadioButton1.setText("Green");
        greenLineRadioButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                greenLineRadioButton1MouseClicked(evt);
            }
        });
        greenLineRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                greenLineRadioButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(greenLineRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 620, -1, -1));

        blockNumberComboChooser1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "choose a certain block" }));
        blockNumberComboChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockNumberComboChooser1ActionPerformed(evt);
            }
        });
        getContentPane().add(blockNumberComboChooser1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 618, 200, 30));

        clearScreen.setText("Clear Display Area→");
        clearScreen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearScreenMouseClicked(evt);
            }
        });
        getContentPane().add(clearScreen, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, -1, -1));

        RadioButtonRailwayLightSTOP.setText("Stop");
        RadioButtonRailwayLightSTOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RadioButtonRailwayLightSTOPActionPerformed(evt);
            }
        });
        getContentPane().add(RadioButtonRailwayLightSTOP, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 110, -1, -1));

        RadioButtonRailwayLightDECELERATE.setText("Decelerate");
        getContentPane().add(RadioButtonRailwayLightDECELERATE, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 130, -1, -1));

        RadioButtonRailwayLightPROCEED.setText("Proceed");
        getContentPane().add(RadioButtonRailwayLightPROCEED, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 150, -1, -1));

        RadioButtonRailwayLightACCELERATE.setText("Accelerate");
        getContentPane().add(RadioButtonRailwayLightACCELERATE, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 170, -1, -1));

        controlRailWayLightSignal.setText("← Change Railway Signal");
        controlRailWayLightSignal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                controlRailWayLightSignalMouseClicked(evt);
            }
        });
        controlRailWayLightSignal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controlRailWayLightSignalActionPerformed(evt);
            }
        });
        getContentPane().add(controlRailWayLightSignal, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 200, 220, -1));

        AddRemoveBlock.setText("Add/Remove a set of blocks for maintenance↑");
        AddRemoveBlock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                AddRemoveBlockMouseClicked(evt);
            }
        });
        AddRemoveBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddRemoveBlockActionPerformed(evt);
            }
        });
        getContentPane().add(AddRemoveBlock, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 500, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void LoadAutomatically()
    {
        BufferedReader br = null;
        String line = "";
        String splitBy = ",";
        String isRed = "Red";
        try
        {
            br = new BufferedReader(new FileReader(PathOfFile)); 
            while ((line = br.readLine()) != null)
            {  
                String [] data = line.split(splitBy);
                
                if(data[0].equals(isRed))
                {
                  RedLine.put(Integer.parseInt(data[2]), new Block(data[0],data[1],Integer.parseInt(data[2]),Double.parseDouble(data[3]), Double.parseDouble(data[4]), Double.parseDouble(data[5]), Double.parseDouble(data[6]),Double.parseDouble(data[7]), data[8], data[9],data[10],data[11]));
                }
                else  
                {
                  GreenLine.put(Integer.parseInt(data[2]), new Block(data[0],data[1],Integer.parseInt(data[2]),Double.parseDouble(data[3]), Double.parseDouble(data[4]), Double.parseDouble(data[5]), Double.parseDouble(data[6]),Double.parseDouble(data[7]), data[8], data[9],data[10],data[11]));
                }
            }
        }catch (FileNotFoundException e) {  
        e.printStackTrace();  
        }catch (IOException e) {  
        e.printStackTrace();  
        }finally {  
        if (br != null) {  
        try {  
            br.close();  
        } catch (IOException e) {  
        e.printStackTrace();  
        }  
        }  
    }
       
    }
    public void LoadFileChooserBasicInformation(String FilePath)
    {
        BufferedReader br = null;
        String line = "";
        String splitBy = ",";
        String isRed = "Red";
       
        try
        {
            br = new BufferedReader(new FileReader(FilePath)); 
            while ((line = br.readLine()) != null)
            {  
                String [] data = line.split(splitBy);

                if(data[0].equals(isRed))
                {
                  RedLine.put(Integer.parseInt(data[2]), new Block(data[0],data[1],Integer.parseInt(data[2]),Double.parseDouble(data[3]), Double.parseDouble(data[4]), Double.parseDouble(data[5]), Double.parseDouble(data[6]),Double.parseDouble(data[7]), data[8], data[9],data[10],data[11]));
                }
                else  
                {
                  GreenLine.put(Integer.parseInt(data[2]), new Block(data[0],data[1],Integer.parseInt(data[2]),Double.parseDouble(data[3]), Double.parseDouble(data[4]), Double.parseDouble(data[5]), Double.parseDouble(data[6]),Double.parseDouble(data[7]), data[8], data[9],data[10],data[11]));
                }
            }
        }catch (FileNotFoundException e) {  
        e.printStackTrace();  
        }catch (IOException e) {  
        e.printStackTrace();  
        }finally {  
        if (br != null) {  
        try {  
            br.close();  
        } catch (IOException e) {  
        e.printStackTrace();  
        }  
        }  
    }
  
    }
    
    public void createLinkedBlock()
    {
        
    }
    private void groupButton() 
    {
        ButtonGroup buttongroup = new ButtonGroup();
        buttongroup.add(redLineRadioButton);
        buttongroup.add(greenLineRadioButton);
    
    }
    
    private void groupButton1()
    {   
        ButtonGroup buttongroup1 = new ButtonGroup();
        buttongroup1.add(redLineRadioButton1);
        buttongroup1.add(greenLineRadioButton1);
    }
    
    private void groupButton2()
    {
        ButtonGroup buttongroup2 = new ButtonGroup();
        buttongroup2.add(RadioButtonRailwayLightSTOP);
        buttongroup2.add(RadioButtonRailwayLightDECELERATE);
        buttongroup2.add(RadioButtonRailwayLightPROCEED);
        buttongroup2.add(RadioButtonRailwayLightACCELERATE);
        
    }
    
    private void blockChooserRed()
    {
        for(int i=1;i<77;i++)
        {
            blockNumberComboChooser.addItem(i);
        }
    }
    private void blockChooserGreen()
    {
        for(int i=1;i<151;i++)
        {
            blockNumberComboChooser.addItem(i);
        }
    }
    private void blockChooserRed1()
    {
        for(int i=1;i<77;i++)
        {
            blockNumberComboChooser1.addItem(i);
        }
    }
    private void blockChooserGreen1()
    {
        for(int i=1;i<151;i++)
        {
            blockNumberComboChooser1.addItem(i);
        }
    }
    public HashMap<Integer,Block> getRedLine()
    {
        return RedLine;
    }
    
    public HashMap<Integer,Block> getGreenLine()
    {
        return GreenLine;
    }
    
    private void LoadFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadFileButtonActionPerformed
        
    }//GEN-LAST:event_LoadFileButtonActionPerformed

    private void checkTransponderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTransponderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkTransponderActionPerformed

    private void redLineRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redLineRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_redLineRadioButtonActionPerformed

    private void greenLineRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenLineRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_greenLineRadioButtonActionPerformed

    private void turnTrackHeaterONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnTrackHeaterONActionPerformed
       
    }//GEN-LAST:event_turnTrackHeaterONActionPerformed

    private void turnTrackHeaterOFFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnTrackHeaterOFFActionPerformed
        
        
    }//GEN-LAST:event_turnTrackHeaterOFFActionPerformed

    private void blockNumberComboChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockNumberComboChooserActionPerformed
        
        
    }//GEN-LAST:event_blockNumberComboChooserActionPerformed
    
    
    private void getCumulativeElevationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getCumulativeElevationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getCumulativeElevationActionPerformed

    private void getSpeedLimitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSpeedLimitActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getSpeedLimitActionPerformed

    private void toggleRailWayCrossingBarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleRailWayCrossingBarsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toggleRailWayCrossingBarsActionPerformed

    private void toggleSwitchMachineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleSwitchMachineActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_toggleSwitchMachineActionPerformed

    private void getStationNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getStationNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getStationNameActionPerformed

    private void LoadFileButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LoadFileButtonMouseClicked
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        LoadFileChooserBasicInformation(filename);
    }//GEN-LAST:event_LoadFileButtonMouseClicked

    private void redLineRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redLineRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_redLineRadioButton1ActionPerformed

    private void greenLineRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_greenLineRadioButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_greenLineRadioButton1ActionPerformed

    private void blockNumberComboChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockNumberComboChooser1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_blockNumberComboChooser1ActionPerformed

    private void checkTrackStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTrackStatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkTrackStatusActionPerformed

    private void getGradeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getGradeMouseClicked
      
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
                int key = (int)blockNumberComboChooser.getSelectedItem();
                displayBlockInformation.append("\nIn red line, the gradient of block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + RedLine.get(key).getGrade() + " %");
            }
        }
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {
                int key = (int)blockNumberComboChooser.getSelectedItem();
                displayBlockInformation.append("\nIn Green Line, the gradient of block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + GreenLine.get(key).getGrade() + " %");
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }   
    }//GEN-LAST:event_getGradeMouseClicked

    private void getGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getGradeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getGradeActionPerformed

    private void clearScreenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearScreenMouseClicked
        displayBlockInformation.setText("");
    }//GEN-LAST:event_clearScreenMouseClicked

    private void toggleRailWayCrossingBarsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toggleRailWayCrossingBarsMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
               if(lineChooserRedCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
               {
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();                  
                    if( !(LinkedRed.getBlockInformation(blocknumber).isRailWayCrossingBarStatus()) )
                    {   
                        JOptionPane.showMessageDialog(null, "In Red Line, There is NO railway crossing bar within block " + blocknumber , "ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                    }
                    else
                    { 
                        LinkedRed.toggleRailWayCrossingBarSignal(blocknumber);
                        if(LinkedRed.getBlockInformation(blocknumber).getRailWayCrossingBars() == 1)
                        {
                          displayBlockInformation.append("\nIn Red Line, NOW the railway crossing bar at block " + blocknumber + " is OPEN");
                        }
                        else
                        {
                          displayBlockInformation.append("\nIn Red Line, NOW the railway crossing bar at block " + blocknumber + " is CLOSED");
                        }
                    }
               }
            }
        }
        /*
        
        */
        
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {
               if(lineChooserGreenCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
               {
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();
                    if(!(LinkedGreen.getBlockInformation(blocknumber).isRailWayCrossingBarStatus()) )
                    {
                        JOptionPane.showMessageDialog(null, "In Green Line, There is NO railway crossing bar within block " + blocknumber , "ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                    }
                    else
                    {     
                        LinkedGreen.toggleRailWayCrossingBarSignal(blocknumber);
                        if(LinkedGreen.getBlockInformation(blocknumber).getRailWayCrossingBars() == 1)
                        {
                          displayBlockInformation.append("\nIn Green Line, NOW the railway crossing bar at block " + blocknumber + " is OPEN");
                        }
                        else
                        {
                          displayBlockInformation.append("\nIn Green Line, NOW the railway crossing bar at block " + blocknumber + " is CLOSED");
                        }
                    }
               }
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_toggleRailWayCrossingBarsMouseClicked

    private void checkRailwayCrossingBarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkRailwayCrossingBarMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
               if(lineChooserRedCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
               {
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();
                    if(LinkedRed.getBlockInformation(blocknumber).getRailWayCrossing().equals("RAILWAY CROSSING"))
                    {   
                        if(LinkedRed.getBlockInformation(blocknumber).getRailWayCrossingBars() == 1)
                        {
                            displayBlockInformation.append("\nIn Red Line, the railway crossing bar in Block " + blocknumber + " is at OPEN position" );      
                        }
                        else
                        {
                            displayBlockInformation.append("\nIn Red Line, the railway crossing bar in Block " + blocknumber + " is at CLOSED position"); 
                        }
                    }

                    else
                    {  
                       JOptionPane.showMessageDialog(null, "In Red Line, the block number you choose is: " + blocknumber + "\nUnfortunately, It has no RAILWAY CROSSING BARS\nPlease choose another block number!","ACCESS DENIED",JOptionPane.WARNING_MESSAGE);

                    }
               }
            }
        }
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {  
                if(lineChooserGreenCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
                {     
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();
                    if(GreenLine.get(blocknumber).getRailWayCrossing().equals("RAILWAY CROSSING"))
                    {   
                        if(GreenLine.get(blocknumber).getRailWayCrossingBars() == 1)
                        {
                            displayBlockInformation.append("\nIn Green Line, the railway crossing bar in Block " + blocknumber + " is at OPEN position" );      
                        }
                        else
                        {
                            displayBlockInformation.append("\nIn Green Line, the railway crossing bar in Block " + blocknumber + " is at CLOSED position"); 
                        }
                    }

                    else
                    {  
                       JOptionPane.showMessageDialog(null, "In Green Line, the block number you choose is: " + blocknumber + "\nUnfortunately, It has no RAILWAY CROSSING BARS\nPlease choose another block number!","ACCESS DENIED",JOptionPane.WARNING_MESSAGE); 

                    }
                }
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_checkRailwayCrossingBarMouseClicked

    private void checkRailwayCrossingBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkRailwayCrossingBarActionPerformed
       
    }//GEN-LAST:event_checkRailwayCrossingBarActionPerformed

    private void checkRailwaySignalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkRailwaySignalMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
                if(lineChooserRedCounter == 0)
                {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                }
    
                else
                {
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();
                    switch(LinkedRed.getBlockInformation(blocknumber).getTrafficLight())
                    {
                        case 0:
                                displayBlockInformation.append("\nIn Red Line, the Railway Signal in Block " + blocknumber + " shows RED now" );
                                break;
                        case 1:
                                displayBlockInformation.append("\nIn Red Line, the Railway Signal in Block " + blocknumber + " shows YELLOW now" );
                                break;
                        case 2:
                                displayBlockInformation.append("\nIn Red Line, the Railway Signal in Block " + blocknumber + " shows GREEN now" );
                                break;
                        case 3:
                                displayBlockInformation.append("\nIn Red Line, the Railway Signal in Block " + blocknumber + " shows SUPERGREEN now" );
                                break;
                        default:
                                JOptionPane.showMessageDialog(null, "System receive anonymous attack","System Error",JOptionPane.ERROR_MESSAGE);
                                break;
                    }
                }
               
            }
        }
        
        /*
        
        */
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {
                if(lineChooserGreenCounter == 0)
                {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                }
    
                else
                {
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();
                    switch(LinkedGreen.getBlockInformation(blocknumber).getTrafficLight())
                    {
                        case 0:
                                displayBlockInformation.append("\nIn Green Line, the Railway Signal in Block " + blocknumber + " shows RED now" );
                                break;
                        case 1:
                                displayBlockInformation.append("\nIn Green Line, the Railway Signal in Block " + blocknumber + " shows YELLOW now" );
                                break;
                        case 2:
                                displayBlockInformation.append("\nIn Green Line, the Railway Signal in Block " + blocknumber + " shows GREEN now" );
                                break;
                        case 3:
                                displayBlockInformation.append("\nIn Green Line, the Railway Signal in Block " + blocknumber + " shows SUPERGREEN now" );
                                break;
                        default:
                                JOptionPane.showMessageDialog(null, "System receive anonymous attack","System Error",JOptionPane.ERROR_MESSAGE);
                                break;
                    }
                }
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_checkRailwaySignalMouseClicked

    private void checkSwitchMachineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkSwitchMachineMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
               if(lineChooserRedCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
               {
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();
                    if(LinkedRed.getBlockInformation(blocknumber).getSwitchMachine().equals("SWITCH"))
                    {   
                        if(!(LinkedRed.getBlockInformation(blocknumber).getBranchDirection()))
                        {
                            displayBlockInformation.append("\nIn Red line, the switch machine in block " + blocknumber + " is at default position" );
                        }
                        else
                        {
                            displayBlockInformation.append("\nIn Red line, the switch machine in block " + blocknumber + " is at optional position" );
                        }
                    }

                    else
                    {  
                       JOptionPane.showMessageDialog(null, "In Red Line, the block number you choose is: " + blocknumber + "\nUnfortunately, It has NO SWITCH MACHINE\nPlease choose another block number!","ACCESS DENIED",JOptionPane.WARNING_MESSAGE);
                       
                    }
                }
            }
        }
        /*
        
        */
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {
                if(lineChooserGreenCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
               {
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();
                    if(LinkedGreen.getBlockInformation(blocknumber).getSwitchMachine().equals("SWITCH"))
                    {   
                        if(!(LinkedGreen.getBlockInformation(blocknumber).getBranchDirection()))
                        {
                            displayBlockInformation.append("\nIn Green line, the switch machine in block " + blocknumber + " is at default position" );
                        }
                        else
                        {
                            displayBlockInformation.append("\nIn Green line, the switch machine in block " + blocknumber + " is at optional position" );
                        }
                    }

                    else
                    {  
                       JOptionPane.showMessageDialog(null, "In Green Line, the block number you choose is: " + blocknumber + "\nUnfortunately, It has NO SWITCH MACHINE\nPlease choose another block number!","ACCESS DENIED",JOptionPane.WARNING_MESSAGE);
                       
                    }
                }
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_checkSwitchMachineMouseClicked

    private void getElevationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getElevationMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
                int key = (int)blockNumberComboChooser.getSelectedItem();
                displayBlockInformation.append("\nIn Red Line, the elevation of block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + RedLine.get(key).getElevation() + " M");
            }
        }
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {
                int key = (int)blockNumberComboChooser.getSelectedItem();
                displayBlockInformation.append("\nIn Green Line, the elevation of block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + GreenLine.get(key).getElevation() + " M");
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_getElevationMouseClicked

    private void getCumulativeElevationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getCumulativeElevationMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
                int key = (int)blockNumberComboChooser.getSelectedItem();
                displayBlockInformation.append("\nIn Red Line, the cumulative elevation of block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + RedLine.get(key).getCumulativeElevation() + " M");
            }
        }
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {
                int key = (int)blockNumberComboChooser.getSelectedItem();
                displayBlockInformation.append("\nIn Green Line, the cumulative elevation of block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + GreenLine.get(key).getCumulativeElevation() + " M");
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_getCumulativeElevationMouseClicked

    private void getBlockLengthMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getBlockLengthMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
                int key = (int)blockNumberComboChooser.getSelectedItem();
                displayBlockInformation.append("\nIn Red Line, the size of block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + RedLine.get(key).getBlockLength() + " m");
            }
        }
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {
                int key = (int)blockNumberComboChooser.getSelectedItem();
                displayBlockInformation.append("\nIn Green Line, the size of block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + GreenLine.get(key).getBlockLength() + " m");
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_getBlockLengthMouseClicked

    private void getSpeedLimitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getSpeedLimitMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
                int key = (int)blockNumberComboChooser.getSelectedItem();
                displayBlockInformation.append("\nIn Red Line, the speed limit of block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + RedLine.get(key).getSpeedLimit() + " Km/Hr");
            }
        }
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {
                int key = (int)blockNumberComboChooser.getSelectedItem();
                displayBlockInformation.append("\nIn Green line, the speed limit of block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + GreenLine.get(key).getSpeedLimit() + " Km/Hr");
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_getSpeedLimitMouseClicked

    private void getStationNameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getStationNameMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
                int key = (int)blockNumberComboChooser.getSelectedItem();
                if(!(RedLine.get(key).getStationName().equals("null")))
                {
                    displayBlockInformation.append("\nIn Red Line, the station in block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + RedLine.get(key).getStationName());
                }
                else
                {   
                    JOptionPane.showMessageDialog(null, "In Red Line, the block number you choose is: " + key + "\nUnfortunately, It has no Station\nPlease choose another block number!","ACCESS DENIED",JOptionPane.ERROR_MESSAGE); 
                    displayBlockInformation.append("\nIn Red Line, there is no station with block " + blockNumberComboChooser.getSelectedItem().toString());
                }
            }
        }
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {
                int key = (int)blockNumberComboChooser.getSelectedItem();
                if(!(GreenLine.get(key).getStationName().equals("null")))
                {
                    displayBlockInformation.append("\nIn Green Line, the station in block " + blockNumberComboChooser.getSelectedItem().toString() + "  is  " + GreenLine.get(key).getStationName());
                }
                else
                {   
                    JOptionPane.showMessageDialog(null, "In Green Line, the block number you choose is: " + key + "\nUnfortunately, It has no Station\nPlease choose another block number!","ACCESS DENIED",JOptionPane.ERROR_MESSAGE); 
                    displayBlockInformation.append("\nIn Green Line, there is no station with block " + blockNumberComboChooser.getSelectedItem().toString());
                }
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_getStationNameMouseClicked

    private void checkSwitchMachineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkSwitchMachineActionPerformed
       
    }//GEN-LAST:event_checkSwitchMachineActionPerformed

    private void controlRailWayLightSignalMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_controlRailWayLightSignalMouseClicked
        
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            } 
            else
            {   
                
              int blocknumber = (int)blockNumberComboChooser.getSelectedItem();                  
              if(RadioButtonRailwayLightSTOP.isSelected())
              {
                  if(lineChooserRedCounter == 0)
                  {
                       JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                  }
                  else
                  {
                        LinkedRed.controlRailWayLightSignal(blocknumber, 0);
                        displayBlockInformation.append("\nIn Red Line, NOW the railway signal in block " + blocknumber + " turns RED");
                  }
              }
              else if(RadioButtonRailwayLightDECELERATE.isSelected())
              { 
                  if(lineChooserRedCounter == 0)
                  {
                       JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                  }
                  else
                  {
                        LinkedRed.controlRailWayLightSignal(blocknumber, 1);
                        displayBlockInformation.append("\nIn Red Line, NOW the railway signal in block " + blocknumber + " turns YELLOW");
                  }
              }
              else if(RadioButtonRailwayLightPROCEED.isSelected())
              {   
                  if(lineChooserRedCounter == 0)
                  {
                      JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                  }
                  else
                  {
                        LinkedRed.controlRailWayLightSignal(blocknumber, 2);
                        displayBlockInformation.append("\nIn Red Line, NOW the railway signal in block " + blocknumber + " turns GREEN");
                  }
              }
              else if(RadioButtonRailwayLightACCELERATE.isSelected())
              { 
                  if(lineChooserRedCounter == 0)
                  {
                      JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                  }
                  else
                  {
                      LinkedRed.controlRailWayLightSignal(blocknumber, 3);
                      displayBlockInformation.append("\nIn Red Line, NOW the railway signal in block " + blocknumber + " turns SUPERGREEN");
                  }
              }
              else
              {
                  JOptionPane.showMessageDialog(null, "In Red Line, the default Railway Signal is GREEN for all blocks\nIn order to control the Railway Signal, You must choose a state to begin operation ","ACCESS DENIED",JOptionPane.WARNING_MESSAGE);
              } 
            }
        }
        
        /*
            
        */
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            else
            {
                
              int blocknumber = (int)blockNumberComboChooser.getSelectedItem();  
              if(RadioButtonRailwayLightSTOP.isSelected())
              {
                  if(lineChooserGreenCounter == 0)
                  {
                       JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                  }
                  else
                  {
                        LinkedGreen.controlRailWayLightSignal(blocknumber, 0);
                        displayBlockInformation.append("\nIn Green Line, NOW the railway signal in block " + blocknumber + " turns RED");
                  }
              }
              else if(RadioButtonRailwayLightDECELERATE.isSelected())
              { 
                  if(lineChooserGreenCounter == 0)
                  {
                       JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                  }
                  else
                  {
                        LinkedGreen.controlRailWayLightSignal(blocknumber, 1);
                        displayBlockInformation.append("\nIn Green Line, NOW the railway signal in block " + blocknumber + " turns YELLOW");
                  }
              }
              else if(RadioButtonRailwayLightPROCEED.isSelected())
              {   
                  if(lineChooserGreenCounter == 0)
                  {
                      JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                  }
                  else
                  {
                        LinkedGreen.controlRailWayLightSignal(blocknumber, 2);
                        displayBlockInformation.append("\nIn Green Line, NOW the railway signal in block " + blocknumber + " turns GREEN");
                  }
              }
              else if(RadioButtonRailwayLightACCELERATE.isSelected())
              { 
                  if(lineChooserGreenCounter == 0)
                  {
                      JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                  }
                  else
                  {
                      LinkedGreen.controlRailWayLightSignal(blocknumber, 3);
                      displayBlockInformation.append("\nIn Green Line, NOW the railway signal in block " + blocknumber + " turns SUPERGREEN");
                  }
              }
              else
              {
                  JOptionPane.showMessageDialog(null, "In Green Line, the default Railway Signal is GREEN\nIn order to control the Railway Signal, You must choose a state to begin operation ","ACCESS DENIED",JOptionPane.WARNING_MESSAGE);
              } 

            }
        }
       
        /*
        
        */
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        } 
       
    }//GEN-LAST:event_controlRailWayLightSignalMouseClicked

    private void controlRailWayLightSignalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controlRailWayLightSignalActionPerformed
       
    }//GEN-LAST:event_controlRailWayLightSignalActionPerformed

    private void checkBrokenRailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBrokenRailActionPerformed
        
    }//GEN-LAST:event_checkBrokenRailActionPerformed

    private void RadioButtonRailwayLightSTOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RadioButtonRailwayLightSTOPActionPerformed
 
    }//GEN-LAST:event_RadioButtonRailwayLightSTOPActionPerformed

    private void toggleSwitchMachineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toggleSwitchMachineMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
               if(lineChooserRedCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
               {
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();                  
                    if( !(LinkedRed.getBlockInformation(blocknumber).isSwitchMachineStatus()) )
                    { 
                        JOptionPane.showMessageDialog(null, "In Red Line, There is NO switch machine within block " + blocknumber , "ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                    }
                    else
                    {   
                        LinkedRed.toggleTrackModelSwitch(blocknumber);
                        if(!(LinkedRed.getBlockInformation(blocknumber).getBranchDirection()))
                        {
                          displayBlockInformation.append("\nIn Red Line, NOW the switch machine at block " + blocknumber + " is at its default position");
                        }
                        else
                        {
                          displayBlockInformation.append("\nIn Red Line, NOW the switch machine at block " + blocknumber + " is at its optional position");
                        }
                    }
               }
            }
        }
        /*
        
        */
        
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {
               if(lineChooserGreenCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
               {
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();                  
                    if( !(LinkedGreen.getBlockInformation(blocknumber).isSwitchMachineStatus()) )
                    { 
                        JOptionPane.showMessageDialog(null, "In Green Line, There is NO switch machine within block " + blocknumber , "ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
                    }
                    else
                    {  
                        LinkedGreen.toggleTrackModelSwitch(blocknumber);
                        if(!(LinkedGreen.getBlockInformation(blocknumber).getBranchDirection()))
                        {
                          displayBlockInformation.append("\nIn Green Line, NOW the switch machine at block " + blocknumber + " is at its default position");
                        }
                        else
                        {
                          displayBlockInformation.append("\nIn Green Line, NOW the switch machine at block " + blocknumber + " is at its optional position");
                        }
                    }
               }
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_toggleSwitchMachineMouseClicked

    private void checkTrackStatusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkTrackStatusMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            else
            {   
               if(lineChooserRedCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
               {
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();
                    if(LinkedRed.getBlockInformation(blocknumber).getTrackStatus() == 100)
                    {
                          displayBlockInformation.append("\nIn Red Line, the track in Block " + blocknumber + " is at normal condition" );      
                    }
                    else
                    {
                          displayBlockInformation.append("\nIn Red Line, the track in Block " + blocknumber + " is closed for maintenance"); 
                    }  
               }
            }
        }
        
        /*
        
        */
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {  
                if(lineChooserGreenCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
                {     
                    int blocknumber = (int)blockNumberComboChooser.getSelectedItem();
                   
                    if(LinkedGreen.getBlockInformation(blocknumber).getTrackStatus() == 100)
                    {
                         displayBlockInformation.append("\nIn Green Line, the track in Block " + blocknumber + " is at normal condition" );      
                    }
                    else
                    {
                         displayBlockInformation.append("\nIn Green Line, the track in Block " + blocknumber + " is closed for maintenance"); 
                    }
                }
            }
        }
        
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_checkTrackStatusMouseClicked

    private void AddRemoveBlockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AddRemoveBlockMouseClicked
        if(redLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = redLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
            else
            {   
               if(lineChooserRedCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
               {   
                    String blockStart = JOptionPane.showInputDialog("Please select a start block to begin operation");
                    String blockEnd = JOptionPane.showInputDialog("Please select a end block to begin operation");
                    int startBlock;
                    int endBlock;
                    Object [] operationMode = {"Perform remove tracks", "Perform add tracks"};
                    Object selectMode = JOptionPane.showInputDialog(null, "Please choose one operation", " OPERATION MIDE ", JOptionPane.INFORMATION_MESSAGE, null, operationMode,operationMode[0]);
                    
                    if(selectMode == operationMode[0])
                    {       
                          try
                          {
                                
                            startBlock = Integer.parseInt(blockStart);
                            endBlock = Integer.parseInt(blockEnd);
                            if(startBlock>endBlock)
                            {
                                JOptionPane.showMessageDialog(null,"The input is conflicted, the start block should be smaller than or equal to end block \nTherefore, system cannot process the request","",JOptionPane.ERROR_MESSAGE);
                            }
                            else if(startBlock == endBlock)
                            {
                                JOptionPane.showMessageDialog(null, "You select only one block. The block number is: " + startBlock + " for further operation", "Prompt", JOptionPane.INFORMATION_MESSAGE);
                                LinkedRed.removeTrackModelBlock(startBlock, endBlock);
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "You select block " + blockStart + " to " + blockEnd  + " for further operation", "Prompt", JOptionPane.INFORMATION_MESSAGE);
                                LinkedRed.removeTrackModelBlock(startBlock, endBlock);
                            }
                          }
                          catch(NumberFormatException e)
                          { 
                                JOptionPane.showMessageDialog(null, "You MUST input a number at least!", "Input Format Error", JOptionPane.ERROR_MESSAGE);
                          }
                     
                    }
                    else
                    {
                          try
                          {
                                
                            startBlock = Integer.parseInt(blockStart);
                            endBlock = Integer.parseInt(blockEnd);
                            if(startBlock>endBlock)
                            {
                                JOptionPane.showMessageDialog(null,"The input is conflicted, the start block should be smaller than or equal to end block \nTherefore, system cannot process the request","",JOptionPane.ERROR_MESSAGE);
                            }
                            else if(startBlock == endBlock)
                            {
                                JOptionPane.showMessageDialog(null, "In Red Line, you select only one block. The block number is: " + startBlock + " for further operation", "Prompt", JOptionPane.INFORMATION_MESSAGE);
                                LinkedRed.addTrackModelBlock(startBlock, endBlock);
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "In Red Line, you select block " + blockStart + " to " + blockEnd  + " for further operation", "Prompt", JOptionPane.INFORMATION_MESSAGE);
                                LinkedRed.addTrackModelBlock(startBlock, endBlock);
                            }
                          }
                          catch(NumberFormatException e)
                          { 
                                JOptionPane.showMessageDialog(null, "You MUST input a number at least!", "Input Format Error", JOptionPane.ERROR_MESSAGE);
                          } 
                    }
               }
            }
        }
        /*
        
        */
        
        else if(greenLineRadioButton.isSelected())
        {   
            trainLineChooserRadioGroup = greenLineRadioButton.getText();
            if(blockNumberComboChooser.getSelectedItem().toString().equals("choose a certain block"))
            {
                displayBlockHeader.setText("You choose " + trainLineChooserRadioGroup + " Line" + "\n" + "Please choose a block number");
            }
            
             else
            {
               if(lineChooserGreenCounter == 0)
               {
                    JOptionPane.showMessageDialog(null, "You must confirm your selection of train line and block number first before further operation","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
               }
               else
               {
                    String blockStart = JOptionPane.showInputDialog("Please select a start block to begin operation");
                    String blockEnd = JOptionPane.showInputDialog("Please select a end block to begin operation");
                    int startBlock;
                    int endBlock;
                    Object [] operationMode = {"Perform remove tracks", "Perform add tracks"};
                    Object selectMode = JOptionPane.showInputDialog(null, "Please choose one operation", " OPERATION MIDE ", JOptionPane.INFORMATION_MESSAGE, null, operationMode,operationMode[0]);
                    
                    if(selectMode == operationMode[0])
                    {       
                          try
                          {
                                
                            startBlock = Integer.parseInt(blockStart);
                            endBlock = Integer.parseInt(blockEnd);
                            if(startBlock>endBlock)
                            {
                                JOptionPane.showMessageDialog(null,"The input is conflicted, the start block should be smaller than or equal to end block \nTherefore, system cannot process the request","",JOptionPane.ERROR_MESSAGE);
                            }
                            else if(startBlock == endBlock)
                            {
                                JOptionPane.showMessageDialog(null, "In Green Line, you select only one block. The block number is: " + startBlock + " for further operation", "Prompt", JOptionPane.INFORMATION_MESSAGE);
                                LinkedGreen.removeTrackModelBlock(startBlock, endBlock);
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "In Green Line, you select block " + blockStart + " to " + blockEnd  + " for further operation", "Prompt", JOptionPane.INFORMATION_MESSAGE);
                                LinkedGreen.removeTrackModelBlock(startBlock, endBlock);
                            }
                          }
                          catch(NumberFormatException e)
                          { 
                                JOptionPane.showMessageDialog(null, "You MUST input a number at least!", "Input Format Error", JOptionPane.ERROR_MESSAGE);
                          }
                     
                    }
                    else
                    {
                          try
                          {
                                
                            startBlock = Integer.parseInt(blockStart);
                            endBlock = Integer.parseInt(blockEnd);
                            if(startBlock>endBlock)
                            {
                                JOptionPane.showMessageDialog(null,"The input is conflicted, the start block should be smaller than or equal to end block \nTherefore, system cannot process the request","",JOptionPane.ERROR_MESSAGE);
                            }
                            else if(startBlock == endBlock)
                            {
                                JOptionPane.showMessageDialog(null, "In Green Line, you select only one block. The block number is: " + startBlock + " for further operation", "Prompt", JOptionPane.INFORMATION_MESSAGE);
                                LinkedGreen.addTrackModelBlock(startBlock, endBlock);
                            }
                            else
                            {
                                JOptionPane.showMessageDialog(null, "In Green Line, you select block " + blockStart + " to " + blockEnd  + " for further operation", "Prompt", JOptionPane.INFORMATION_MESSAGE);
                                LinkedGreen.addTrackModelBlock(startBlock, endBlock);
                            }
                          }
                          catch(NumberFormatException e)
                          { 
                                JOptionPane.showMessageDialog(null, "You MUST input a number at least!", "Input Format Error", JOptionPane.ERROR_MESSAGE);
                          } 
                    }
               }
            }
        }
       
        else
        {
            JOptionPane.showMessageDialog(null, "You must choose a train line to begin operation ","ACCESS DENIED",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AddRemoveBlockMouseClicked

    private void turnTrackHeaterONMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_turnTrackHeaterONMouseClicked
        JOptionPane.showMessageDialog(null, "The track heater is on for the who system", "Prompt", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_turnTrackHeaterONMouseClicked

    private void turnTrackHeaterOFFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_turnTrackHeaterOFFMouseClicked
        JOptionPane.showMessageDialog(null, "The track heater is OFF for the who system", "Prompt", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_turnTrackHeaterOFFMouseClicked

    private void AddRemoveBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddRemoveBlockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AddRemoveBlockActionPerformed

    private void getElevationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getElevationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getElevationActionPerformed

    private void redLineRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redLineRadioButtonMouseClicked
        blockChooserRed();
        lineChooserRedCounter++;
        if(lineChooserRedCounter == 1)
        {
           LinkedRed = new LinkedBlock(RedLine,1);

        }
    }//GEN-LAST:event_redLineRadioButtonMouseClicked

    private void greenLineRadioButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_greenLineRadioButtonMouseClicked
        blockChooserGreen();
        lineChooserGreenCounter++;
        if(lineChooserGreenCounter == 1)
        {
           LinkedGreen = new LinkedBlock(GreenLine,2);
        }
    }//GEN-LAST:event_greenLineRadioButtonMouseClicked

    private void redLineRadioButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redLineRadioButton1MouseClicked
        blockChooserRed1();
        lineChooserRedCounter++;
        if(lineChooserRedCounter == 1)
        {
           LinkedRed = new LinkedBlock(RedLine,1);

        }
    }//GEN-LAST:event_redLineRadioButton1MouseClicked

    private void greenLineRadioButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_greenLineRadioButton1MouseClicked
        blockChooserGreen1();
        lineChooserGreenCounter++;
        if(lineChooserGreenCounter == 1)
        {
           LinkedGreen = new LinkedBlock(GreenLine,2);
        }
    }//GEN-LAST:event_greenLineRadioButton1MouseClicked

   
    public static void main(String args[]) {
       
        /* Set the Nimbus look and feel */
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrackModelUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddRemoveBlock;
    private javax.swing.JButton LoadFileButton;
    private javax.swing.JRadioButton RadioButtonRailwayLightACCELERATE;
    private javax.swing.JRadioButton RadioButtonRailwayLightDECELERATE;
    private javax.swing.JRadioButton RadioButtonRailwayLightPROCEED;
    private javax.swing.JRadioButton RadioButtonRailwayLightSTOP;
    private javax.swing.JComboBox blockNumberComboChooser;
    private javax.swing.JComboBox blockNumberComboChooser1;
    private javax.swing.JCheckBox checkBrokenRail;
    private javax.swing.JCheckBox checkPowerFailure;
    private javax.swing.JButton checkRailwayCrossingBar;
    private javax.swing.JToggleButton checkRailwaySignal;
    private javax.swing.JToggleButton checkSwitchMachine;
    private javax.swing.JCheckBox checkTrackCircuitFailure;
    private javax.swing.JToggleButton checkTrackStatus;
    private javax.swing.JButton checkTransponder;
    private javax.swing.JToggleButton clearScreen;
    private javax.swing.JButton controlRailWayLightSignal;
    private javax.swing.JTextArea displayBlockHeader;
    private javax.swing.JTextArea displayBlockHeader1;
    private javax.swing.JTextArea displayBlockInformation;
    private javax.swing.JTextArea displayTrackLayout;
    private javax.swing.JToggleButton getBlockLength;
    private javax.swing.JButton getCumulativeElevation;
    private javax.swing.JToggleButton getElevation;
    private javax.swing.JToggleButton getGrade;
    private javax.swing.JToggleButton getSpeedLimit;
    private javax.swing.JToggleButton getStationName;
    private javax.swing.JRadioButton greenLineRadioButton;
    private javax.swing.JRadioButton greenLineRadioButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel modeTitle1;
    private javax.swing.JLabel modeTitle2;
    private javax.swing.JRadioButton redLineRadioButton;
    private javax.swing.JRadioButton redLineRadioButton1;
    private javax.swing.JButton toggleRailWayCrossingBars;
    private javax.swing.JButton toggleSwitchMachine;
    private javax.swing.JToggleButton turnTrackHeaterOFF;
    private javax.swing.JToggleButton turnTrackHeaterON;
    // End of variables declaration//GEN-END:variables
}
